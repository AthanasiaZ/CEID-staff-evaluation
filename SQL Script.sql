-- MySQL Script generated by MySQL Workbench
-- Sun Sep  5 15:29:11 2021
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `mydb` ;

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `mydb` DEFAULT CHARACTER SET utf8 ;
USE `mydb` ;

-- -----------------------------------------------------
-- Table `mydb`.`company`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`company` ;

CREATE TABLE IF NOT EXISTS `mydb`.`company` (
  `AFM` CHAR(9) NOT NULL,
  `DOY` VARCHAR(15) NOT NULL,
  `name` VARCHAR(35) NOT NULL,
  `phone` BIGINT(16) NULL DEFAULT NULL,
  `street` VARCHAR(15) NULL DEFAULT NULL,
  `num` TINYINT(4) NULL DEFAULT NULL,
  `city` VARCHAR(15) NULL DEFAULT NULL,
  `country` VARCHAR(15) NULL DEFAULT NULL,
  PRIMARY KEY (`AFM`));


-- -----------------------------------------------------
-- Table `mydb`.`user`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`user` ;

CREATE TABLE IF NOT EXISTS `mydb`.`user` (
  `username` VARCHAR(12) NULL DEFAULT NULL,
  `password` VARCHAR(10) NULL DEFAULT NULL,
  `name` VARCHAR(25) NULL DEFAULT NULL,
  `surname` VARCHAR(35) NULL DEFAULT NULL,
  `regDate` DATETIME NULL DEFAULT NULL,
  `email` VARCHAR(30) NULL DEFAULT NULL,
  PRIMARY KEY (`username`));


-- -----------------------------------------------------
-- Table `mydb`.`manager`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`manager` ;

CREATE TABLE IF NOT EXISTS `mydb`.`manager` (
  `managerUsername` VARCHAR(12) NULL DEFAULT NULL,
  `experience` TINYINT(4) NULL DEFAULT NULL,
  `firm` CHAR(9) NULL DEFAULT NULL,
  PRIMARY KEY (`managerUsername`),
  CONSTRAINT `MNGRUSR`
    FOREIGN KEY (`managerUsername`)
    REFERENCES `mydb`.`user` (`username`)
    ON DELETE CASCADE
    ON UPDATE CASCADE);


-- -----------------------------------------------------
-- Table `mydb`.`employee`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`employee` ;

CREATE TABLE IF NOT EXISTS `mydb`.`employee` (
  `username` VARCHAR(12) NULL DEFAULT NULL,
  `resume` TEXT NULL DEFAULT NULL,
  `sistatikes` VARCHAR(35) NULL DEFAULT NULL,
  `certificates` VARCHAR(35) NULL DEFAULT NULL,
  `awards` VARCHAR(35) NULL DEFAULT NULL,
  `employeeID` INT(10) NULL DEFAULT NULL,
  PRIMARY KEY (`username`),
  CONSTRAINT `EMPLUSR`
    FOREIGN KEY (`username`)
    REFERENCES `mydb`.`user` (`username`)
    ON DELETE CASCADE
    ON UPDATE CASCADE);


-- -----------------------------------------------------
-- Table `mydb`.`degree`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`degree` ;

CREATE TABLE IF NOT EXISTS `mydb`.`degree` (
  `title` VARCHAR(50) NULL DEFAULT NULL,
  `institution` VARCHAR(40) NULL DEFAULT NULL,
  `bathmida` ENUM('LYKEIO', 'UNI', 'MASTER', 'PHD') NULL DEFAULT NULL,
  PRIMARY KEY (`title`, `institution`));


-- -----------------------------------------------------
-- Table `mydb`.`has_degree`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`has_degree` ;

CREATE TABLE IF NOT EXISTS `mydb`.`has_degree` (
  `title` VARCHAR(50) NULL DEFAULT NULL,
  `institution` VARCHAR(50) NULL DEFAULT NULL,
  `emplUsername` VARCHAR(12) NULL DEFAULT NULL,
  `etos` YEAR(4) NULL DEFAULT NULL,
  `grade` FLOAT(3,1) NULL DEFAULT NULL,
  PRIMARY KEY (`title`, `institution`, `emplUsername`),
  INDEX `HASDEGRINST` (`institution` ASC) VISIBLE,
  INDEX `HASDEGREMPL` (`emplUsername` ASC) VISIBLE,
  CONSTRAINT `HASDEGRTITLE`
    FOREIGN KEY (`title`)
    REFERENCES `mydb`.`degree` (`title`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `HASDEGRINST`
    FOREIGN KEY (`institution`)
    REFERENCES `mydb`.`degree` (`institution`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `HASDEGREMPL`
    FOREIGN KEY (`emplUsername`)
    REFERENCES `mydb`.`employee` (`username`)
    ON DELETE CASCADE
    ON UPDATE CASCADE);


-- -----------------------------------------------------
-- Table `mydb`.`project`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`project` ;

CREATE TABLE IF NOT EXISTS `mydb`.`project` (
  `employee` VARCHAR(12) NULL DEFAULT NULL,
  `num` INT NULL DEFAULT NULL AUTO_INCREMENT,
  `descr` TEXT NULL DEFAULT NULL,
  `url` VARCHAR(60) NULL DEFAULT NULL,
  PRIMARY KEY (`num`, `employee`),
  INDEX `PROJEMPL` (`employee` ASC) VISIBLE,
  CONSTRAINT `PROJEMPL`
    FOREIGN KEY (`employee`)
    REFERENCES `mydb`.`employee` (`username`)
    ON DELETE CASCADE
    ON UPDATE CASCADE);


-- -----------------------------------------------------
-- Table `mydb`.`evaluator`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`evaluator` ;

CREATE TABLE IF NOT EXISTS `mydb`.`evaluator` (
  `username` VARCHAR(12) NULL DEFAULT NULL,
  `experience` TINYINT(4) NULL DEFAULT NULL,
  `firm` CHAR(9) NULL DEFAULT NULL,
  `evaluatorID` INT(10) NULL DEFAULT NULL,
  PRIMARY KEY (`username`),
  CONSTRAINT `EMPLEVAL`
    FOREIGN KEY (`username`)
    REFERENCES `mydb`.`user` (`username`)
    ON DELETE CASCADE
    ON UPDATE CASCADE);


-- -----------------------------------------------------
-- Table `mydb`.`job`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`job` ;

CREATE TABLE IF NOT EXISTS `mydb`.`job` (
  `ID` INT(4) NOT NULL,
  `startDate` DATE NULL DEFAULT NULL,
  `salary` FLOAT(6,1) NULL DEFAULT NULL,
  `position` VARCHAR(40) NULL DEFAULT NULL,
  `edra` VARCHAR(45) NULL DEFAULT NULL,
  `evaluator` VARCHAR(12) NULL DEFAULT NULL,
  `announcement_date` DATETIME NULL DEFAULT NULL,
  `expiration_date` DATETIME NULL DEFAULT NULL,
  PRIMARY KEY (`ID`),
  INDEX `JOBEVAL` (`evaluator` ASC) VISIBLE,
  CONSTRAINT `JOBEVAL`
    FOREIGN KEY (`evaluator`)
    REFERENCES `mydb`.`evaluator` (`username`)
    ON DELETE CASCADE
    ON UPDATE CASCADE);


-- -----------------------------------------------------
-- Table `mydb`.`antikeim`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`antikeim` ;

CREATE TABLE IF NOT EXISTS `mydb`.`antikeim` (
  `title` VARCHAR(36) NULL DEFAULT NULL,
  `descr` TINYTEXT NULL DEFAULT NULL,
  `parentField` VARCHAR(36) NULL DEFAULT NULL,
  PRIMARY KEY (`title`),
  CONSTRAINT `ANTIKEIMANTIKEIM`
    FOREIGN KEY (`title`)
    REFERENCES `mydb`.`antikeim` (`title`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE);


-- -----------------------------------------------------
-- Table `mydb`.`needs`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`needs` ;

CREATE TABLE IF NOT EXISTS `mydb`.`needs` (
  `jobID` INT(4) NULL DEFAULT NULL,
  `fieldTitle` VARCHAR(36) NULL DEFAULT NULL,
  PRIMARY KEY (`jobID`, `fieldTitle`),
  INDEX `NEEDSANTIKEIM` (`fieldTitle` ASC) VISIBLE,
  CONSTRAINT `NEEDSJOB`
    FOREIGN KEY (`jobID`)
    REFERENCES `mydb`.`job` (`ID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `NEEDSANTIKEIM`
    FOREIGN KEY (`fieldTitle`)
    REFERENCES `mydb`.`antikeim` (`title`)
    ON DELETE CASCADE
    ON UPDATE CASCADE);


-- -----------------------------------------------------
-- Table `mydb`.`request_evaluation`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`request_evaluation` ;

CREATE TABLE IF NOT EXISTS `mydb`.`request_evaluation` (
  `emplUsername` VARCHAR(12) NULL DEFAULT NULL,
  `jobID` INT(4) NULL DEFAULT NULL,
  PRIMARY KEY (`emplUsername`, `jobID`),
  INDEX `REQEVALJOB` (`jobID` ASC) VISIBLE,
  CONSTRAINT `REQEVALEMPL`
    FOREIGN KEY (`emplUsername`)
    REFERENCES `mydb`.`employee` (`username`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `REQEVALJOB`
    FOREIGN KEY (`jobID`)
    REFERENCES `mydb`.`job` (`ID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE);


-- -----------------------------------------------------
-- Table `mydb`.`evaluation`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`evaluation` ;

CREATE TABLE IF NOT EXISTS `mydb`.`evaluation` (
  `evaluationID` INT(4) NULL DEFAULT NULL,
  `emplUsername` VARCHAR(12) NULL DEFAULT NULL,
  `jobID` INT(4) NULL DEFAULT NULL,
  `interviewGrade` INT(1) NULL DEFAULT 0,
  `reportGrade` INT(1) NULL DEFAULT 0,
  `recGrade` INT(1) NULL DEFAULT 0,
  `finalGrade` INT(2) NULL DEFAULT 0,
  `comments` VARCHAR(255) NULL DEFAULT NULL,
  PRIMARY KEY (`evaluationID`, `emplUsername`),
  INDEX `EVALEMPL` (`emplUsername` ASC) VISIBLE,
  INDEX `EVALJOB` (`jobID` ASC) VISIBLE,
  CONSTRAINT `EVALEMPL`
    FOREIGN KEY (`emplUsername`)
    REFERENCES `mydb`.`employee` (`username`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `EVALJOB`
    FOREIGN KEY (`jobID`)
    REFERENCES `mydb`.`job` (`ID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE);


-- -----------------------------------------------------
-- Table `mydb`.`languages`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`languages` ;

CREATE TABLE IF NOT EXISTS `mydb`.`languages` (
  `employee` VARCHAR(12) NULL DEFAULT NULL,
  `language` SET('EN', 'FR', 'SP', 'GR') NULL DEFAULT NULL,
  INDEX `LANGEMPL` (`employee` ASC) VISIBLE,
  CONSTRAINT `LANGEMPL`
    FOREIGN KEY (`employee`)
    REFERENCES `mydb`.`employee` (`username`)
    ON DELETE CASCADE
    ON UPDATE CASCADE);


-- -----------------------------------------------------
-- Table `mydb`.`logs`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`logs` ;

CREATE TABLE IF NOT EXISTS `mydb`.`logs` (
  `username` VARCHAR(12) NOT NULL,
  `xronos` DATETIME NOT NULL,
  `tableName` VARCHAR(45) NULL,
  `actionType` VARCHAR(15) NOT NULL,
  `actionSuccess` TINYINT NOT NULL,
  PRIMARY KEY (`username`, `xronos`),
  CONSTRAINT `LOGUSR`
    FOREIGN KEY (`username`)
    REFERENCES `mydb`.`user` (`username`)
    ON DELETE CASCADE
    ON UPDATE CASCADE);

USE `mydb`;

DELIMITER $$

USE `mydb`$$
DROP TRIGGER IF EXISTS `mydb`.`company_AFTER_UPDATE` $$
USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`company_AFTER_UPDATE` AFTER UPDATE ON `company` FOR EACH ROW
BEGIN
  IF NEW.AFM != OLD.AFM THEN
    SET NEW.AFM = OLD.AFM;
  ELSEIF NEW.DOY != OLD.DOY THEN
    SET NEW.DOY = OLD.DOY;
  ELSEIF NEW.name != OLD.name THEN
    SET NEW.name = OLD.name;
  END IF;
  END$$


USE `mydb`$$
DROP TRIGGER IF EXISTS `mydb`.`user_BEFORE_UPDATE` $$
USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`user_BEFORE_UPDATE` BEFORE UPDATE ON `user` FOR EACH ROW
BEGIN
	IF current_user() != 'administrator' THEN
		IF NEW.username != OLD.username OR NEW.regDate != OLD.regDate OR NEW.name != OLD.name OR OLD.surname != NEW.surname THEN
			SIGNAL SQLSTATE VALUE '45000'
            SET MESSAGE_TEXT = 'You are not allowed to change this field!';
		END IF;
	END IF; 
END$$


USE `mydb`$$
DROP TRIGGER IF EXISTS `mydb`.`employee_AFTER_INSERT` $$
USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`employee_AFTER_INSERT` AFTER INSERT ON `employee` FOR EACH ROW
BEGIN
	UPDATE logs
    SET logs.actionSuccess = 1
    WHERE username = current_user() AND tableName = 'employee' AND actionType = 'INSERT'
    ;
END$$


USE `mydb`$$
DROP TRIGGER IF EXISTS `mydb`.`employee_BEFORE_INSERT` $$
USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`employee_BEFORE_INSERT` BEFORE INSERT ON `employee` FOR EACH ROW
BEGIN
	INSERT INTO logs(username,xronos,actionTable,actionType,actionSuccess)
    VALUES (current_user(),sysdate(),'employee','INSERT',0)
    ;
END$$


USE `mydb`$$
DROP TRIGGER IF EXISTS `mydb`.`employee_BEFORE_UPDATE` $$
USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`employee_BEFORE_UPDATE` BEFORE UPDATE ON `employee` FOR EACH ROW
BEGIN
	INSERT INTO logs(username,xronos,actionTable,actionType,actionSuccess)
    VALUES (current_user(),sysdate(),'employee','UPDATE',0)
    ;
END$$


USE `mydb`$$
DROP TRIGGER IF EXISTS `mydb`.`employee_BEFORE_DELETE` $$
USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`employee_BEFORE_DELETE` BEFORE DELETE ON `employee` FOR EACH ROW
BEGIN
	INSERT INTO logs(username,xronos,actionTable,actionType,actionSuccess)
    VALUES (current_user(),sysdate(),'employee','DELETE',0)
    ;
END$$


USE `mydb`$$
DROP TRIGGER IF EXISTS `mydb`.`employee_AFTER_UPDATE` $$
USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`employee_AFTER_UPDATE` AFTER UPDATE ON `employee` FOR EACH ROW
BEGIN
	UPDATE logs
    SET logs.actionSuccess = 1
    WHERE username = current_user() AND tableName = 'employee' AND actionType = 'UPDATE'
    ;
END$$


USE `mydb`$$
DROP TRIGGER IF EXISTS `mydb`.`employee_AFTER_DELETE` $$
USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`employee_AFTER_DELETE` AFTER DELETE ON `employee` FOR EACH ROW
BEGIN
	UPDATE logs
    SET logs.actionSuccess = 1
    WHERE username = current_user() AND tableName = 'employee' AND actionType = 'UPDATE'
    ;
END$$


USE `mydb`$$
DROP TRIGGER IF EXISTS `mydb`.`job_BEFORE_INSERT` $$
USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`job_BEFORE_INSERT` BEFORE INSERT ON `job` FOR EACH ROW
BEGIN
	INSERT INTO logs(username,xronos,actionTable,actionType,actionSuccess)
    VALUES (current_user(),sysdate(),'job','INSERT',0)
    ;
END$$


USE `mydb`$$
DROP TRIGGER IF EXISTS `mydb`.`job_AFTER_INSERT` $$
USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`job_AFTER_INSERT` AFTER INSERT ON `job` FOR EACH ROW
BEGIN
	UPDATE logs
    SET logs.actionSuccess = 1
    WHERE username = current_user() AND tableName = 'job' AND actionType = 'INSERT'
    ;
END$$


USE `mydb`$$
DROP TRIGGER IF EXISTS `mydb`.`job_BEFORE_UPDATE` $$
USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`job_BEFORE_UPDATE` BEFORE UPDATE ON `job` FOR EACH ROW
BEGIN
	INSERT INTO logs(username,xronos,actionTable,actionType,actionSuccess)
    VALUES (current_user(),sysdate(),'job','UPDATE',0)
    ;
END$$


USE `mydb`$$
DROP TRIGGER IF EXISTS `mydb`.`job_AFTER_UPDATE` $$
USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`job_AFTER_UPDATE` AFTER UPDATE ON `job` FOR EACH ROW
BEGIN
	UPDATE logs
    SET logs.actionSuccess = 1
    WHERE username = current_user() AND tableName = 'job' AND actionType = 'UPDATE'
    ;
END$$


USE `mydb`$$
DROP TRIGGER IF EXISTS `mydb`.`job_BEFORE_DELETE` $$
USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`job_BEFORE_DELETE` BEFORE DELETE ON `job` FOR EACH ROW
BEGIN
	INSERT INTO logs(username,xronos,actionTable,actionType,actionSuccess)
    VALUES (current_user(),sysdate(),'job','DELETE',0)
    ;
END$$


USE `mydb`$$
DROP TRIGGER IF EXISTS `mydb`.`job_AFTER_DELETE` $$
USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`job_AFTER_DELETE` AFTER DELETE ON `job` FOR EACH ROW
BEGIN
	UPDATE logs
    SET logs.actionSuccess = 1
    WHERE username = current_user() AND tableName = 'job' AND actionType = 'DELETE'
    ;
END$$


USE `mydb`$$
DROP TRIGGER IF EXISTS `mydb`.`request_evaluation_BEFORE_INSERT` $$
USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`request_evaluation_BEFORE_INSERT` BEFORE INSERT ON `request_evaluation` FOR EACH ROW
BEGIN
	INSERT INTO logs(username,xronos,actionTable,actionType,actionSuccess)
    VALUES (current_user(),sysdate(),'request_evaluation','INSERT',0)
    ;
END$$


USE `mydb`$$
DROP TRIGGER IF EXISTS `mydb`.`request_evaluation_BEFORE_UPDATE` $$
USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`request_evaluation_BEFORE_UPDATE` BEFORE UPDATE ON `request_evaluation` FOR EACH ROW
BEGIN
	INSERT INTO logs(username,xronos,actionTable,actionType,actionSuccess)
    VALUES (current_user(),sysdate(),'request_evaluation','UPDATE',0)
    ;
END$$


USE `mydb`$$
DROP TRIGGER IF EXISTS `mydb`.`request_evaluation_BEFORE_DELETE` $$
USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`request_evaluation_BEFORE_DELETE` BEFORE DELETE ON `request_evaluation` FOR EACH ROW
BEGIN
	INSERT INTO logs(username,xronos,actionTable,actionType,actionSuccess)
    VALUES (current_user(),sysdate(),'request_evaluation','DELETE',0)
    ;
END$$


USE `mydb`$$
DROP TRIGGER IF EXISTS `mydb`.`request_evaluation_AFTER_INSERT` $$
USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`request_evaluation_AFTER_INSERT` AFTER INSERT ON `request_evaluation` FOR EACH ROW
BEGIN
	UPDATE logs
    SET logs.actionSuccess = 1
    WHERE username = current_user() AND tableName = 'request_evaluation' AND actionType = 'INSERT'
    ;
END$$


USE `mydb`$$
DROP TRIGGER IF EXISTS `mydb`.`request_evaluation_AFTER_UPDATE` $$
USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`request_evaluation_AFTER_UPDATE` AFTER UPDATE ON `request_evaluation` FOR EACH ROW
BEGIN
	UPDATE logs
    SET logs.actionSuccess = 1
    WHERE username = current_user() AND tableName = 'request_evaluation' AND actionType = 'UPDATE'
    ;
END$$


USE `mydb`$$
DROP TRIGGER IF EXISTS `mydb`.`request_evaluation_AFTER_DELETE` $$
USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`request_evaluation_AFTER_DELETE` AFTER DELETE ON `request_evaluation` FOR EACH ROW
BEGIN
	UPDATE logs
    SET logs.actionSuccess = 1
    WHERE username = current_user() AND tableName = 'request_evaluation' AND actionType = 'DELETE'
    ;
END$$


DELIMITER ;
SET SQL_MODE = '';
DROP USER IF EXISTS administrator;
SET SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';
CREATE USER 'administrator' IDENTIFIED BY 'administrator';

GRANT ALL ON `mydb`.* TO 'administrator';
GRANT SELECT, INSERT, TRIGGER, UPDATE, DELETE ON TABLE `mydb`.* TO 'administrator';
GRANT EXECUTE ON ROUTINE `mydb`.* TO 'administrator';

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
